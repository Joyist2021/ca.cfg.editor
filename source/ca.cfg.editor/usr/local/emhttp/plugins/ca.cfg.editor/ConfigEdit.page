Menu="UNRAID-OS"
Title="Config File Editor"
Icon="cogs"
---
<?
require_once("/usr/local/emhttp/plugins/ca.cfg.editor/include/caCredits.php");

$vars = parse_ini_file("/var/local/emhttp/var.ini");
$toolTipsterAllowed = version_compare($vars['version'],"6.3.3",">=") ? "true" : "false";

if (file_exists("$docroot/plugins/dynamix/include/Translations") ) {
	require_once "$docroot/plugins/dynamix/include/Translations.php";
	
	$translationFile = "$docroot/languages/{$_SESSION['locale']}/".basename(strtolower($_SERVER['REQUEST_URI'])).".txt";
	$genericFile     = "$docroot/languages/{$_SESSION['locale']}/translations.txt";
	$pluginTranslations = @parse_lang_file($translationFile);
	$genericTranslations = @parse_lang_file($genericFile);
	$pluginTranslations = array_merge(is_array($genericTranslations) ? $genericTranslations : [],is_array($pluginTranslations) ? $pluginTranslations : [] );
	$language = array_merge($pluginTranslations,$language);
	if ( empty($language) ) 
		$translations = false;
}

function tr($string,$ret=false) {
	if ( function_exists("_") )
		$string =  _($string);
	if ( $ret )
		return $string;
	else
		echo $string;
}

function addCfg($filename) {
  return "<option value='$filename'>$filename</option>";
}

function pluginScan($filename) {
  global $o;
  
  $dirContents = array_diff(scandir($filename),array(".",".."));
  foreach ($dirContents as $cfg ) {
    if ( is_dir("$filename/$cfg") ) {
      pluginScan("$filename/$cfg");
      continue;
    }
    if ( (pathinfo($cfg,PATHINFO_EXTENSION) == "cfg" ) || (pathinfo($cfg,PATHINFO_EXTENSION) == "conf") || (pathinfo($cfg,PATHINFO_EXTENSION) == "ini") || ($cfg == "go") || ($cfg == "stop") ) {
      $o .= addCfg("$filename/$cfg");
    }
  }
}

$o = "<option value='' selected'>".tr("Select File",true)."</option>";
pluginScan("/boot");
?>

<script src="<?=autov("/webGui/javascript/jquery.filetree.js")?>"></script>
<script>
var caURL = '/plugins/ca.cfg.editor/include/exec.php';

$(function() {
  if ( typeof caPluginUpdateCheck === "function" ) {
    caPluginUpdateCheck("ca.cfg.editor.plg",{name:"CA Config File Editor"});
  }

  $('.edits').prop("disabled",true);

  $('#source').fileTreeAttach();
  
  if ( "<?=$toolTipsterAllowed?>" == "true" ) {
    $('.ca_tooltip').tooltipster({delay:[1000,1],timer:15000, animation:'grow', arrow:true, trigger:'custom', triggerOpen:{mouseenter: true}, triggerClose:{click:true,scroll:true,mouseleave:true}});
    $(".tipsterallowed").show();
    $('#credits').tooltipster({trigger: 'custom',triggerOpen: {mouseenter:true},triggerClose:{click:true,scroll:true,mouseleave:true},contentAsHTML: true,maxWidth:550,minWidth:550,animation: 'grow',triggerClose:{click:false,scroll:true,mouseleave:true},interactive: true,viewportAware: true,functionBefore: function(instance,helper) {
        var origin = $(helper.origin);
        var myID = origin.attr('id');
        instance.content("<div style='overflow:scroll; max-height:350px; height:550px; overflow-x:hidden; overflow-y:auto;'><center><img src='/plugins/ca.cfg.editor/images/large.png' width=96px><br><font size='6' color='white'>CA Config Editor</font><br><br><?=$caCredits?></div>");
      }
    });  
  }
});

function editfile() {
  var filename = $("#file").val();
  $("#source").val(filename);
  editfilemanual();
}

function editfilemanual() {
  var filename = $("#source").val();
  if ( ! filename ) {
    $(".edits").prop("disabled",true);
    return;
  }
  $(".choosers").prop("disabled",true);
  $("#editing").html(filename);
  $("#spinner").show();
  $.post(caURL,{action:'edit',filename:filename},function(data) {
    if (data) {
      $("#spinner").hide();
      var filedata = JSON.parse(data);
      if ( filedata.format == "dos" ) {
        $("#formatDiv").addClass("dosFormat");
      } else {
        $("#formatDiv").removeClass("dosFormat");
      }
      setFormatButton();
      if ( filedata.error == "true" ) {    
        $("#formatLine").hide();
        $(".edits,.editButton,#editarea").prop("disabled",true);
        $("#editarea").val("<?tr("Error reading file");?>");
        $("#donebutton,.choosers").prop("disabled",false);
      } else { 
        $("#formatLine").show();
        $("#editarea").val(filedata.contents);
        $("#editarea").attr("data-orig",filedata.contents);
        $(".edits,#cancelbutton").prop("disabled",false);
        $(".editButton,#donebutton").prop("disabled",true);
      }
    }
  });
  $("#backup").html("<?tr("No Backup File Found");?>");
  $.post(caURL,{action:'getBackup',filename:filename},function(data) {
    if (data) {
      $("#backup").html(data);
      $("#backup").val(data);
    }
  });    
}

function cancelEdit() {
  var orig = $("#editarea").attr("data-orig");
  $("#editarea").val(orig);
  $("#file").val("");
  $("#formatLine").hide();
  $(".choosers,#donebutton").prop("disabled",false);
  $("#cancelbutton,.edits").prop("disabled",true);
}

function saveEdits() {
  var filedata = new Object;
  filedata.filename = $("#editing").html();
  filedata.contents = $("#editarea").val();
  filedata.format = $("#formatDiv").hasClass("dosFormat");
  $("#spinner").show();
  $.post(caURL,{action:'save',filedata:filedata},function(data) {
    if (data) {
      $("#file").val("");
      $("#formatLine,#spinner").hide();
      $(".choosers,#donebutton").prop("disabled",false);
      $("#cancelbutton,.edits").prop("disabled",true);
    }
  });
}

function toggleFormat() {
  $(".ca-switch-button-button").toggleClass("dosFormat");
  setFormatButton();
}

function setFormatButton() {
  if ( $(".ca-switch-button-button").hasClass("dosFormat") ) {
    $(".ca-switch-button-button").css("left","12px");
    $("#format").html("DOS (crlf)");
  } else {
    $(".ca-switch-button-button").css("left","0px");
    $("#format").html("Linux (cr)");
  }
  $(".editButton").prop("disabled",false);
}
</script>

<style>
.txtdiv {display:inline-block;}
.txtarea {resize:both;border:1px solid red;width:600px;height:300px;font-family:monospace;}
.fileTree{width:305px;max-height:150px;overflow:scroll;position:absolute;z-index:100;display:none;color:initial;}
table {background-color:transparent;}
table tbody td {line-height:1.4rem;}
</style>
<link type="text/css" rel="stylesheet" href="<?=autov('/webGui/styles/jquery.filetree.css')?>">
<link type="text/css" rel="stylesheet" href="<?=autov('/plugins/ca.cfg.editor/styles/switchbutton.css')?>">

<span id='debugging'></span>
<?tr("Select a file to edit");?>
<select class='choosers' id='file' onchange='editfile();'><?=$o?></select> or <input class='choosers' type='text' id="source" name="shareFolder" value="/" data-pickroot="/"><font size='5'><i style='vertical-align:middle;cursor:pointer;' onclick='editfilemanual();' class="fa fa-pencil-square-o" aria-hidden="true"></i></font>  <?tr("note: editing a binary file could have unintended consequences");?><span id='spinner' style='display:none;'><img width='25px' src='/plugins/ca.cfg.editor/images/spinner2.gif'></span>
<div width:100%;>
<div class='txtdiv'>
<center><?tr("Editing");?>: <span id='editing'><?tr("No file selected");?></span></center>
<textarea wrap='off' class='edits txtarea' id='editarea' oninput='$(".editButton").prop("disabled",false);'></textarea>
</div>
<div class='txtdiv'>
<center><?tr("Backup File");?></center>
<textarea wrap='off' class='txtarea' id='backup' disabled></textarea>
</div>
</div>
<div>
<div id='formatLine' style='display:none;'><div class='ca_tooltip ca-switch-button-background' style='width:25px; height:11px;' onclick='toggleFormat();' title='<?tr("Generally, it is not recommended to change the format");?>'><div id='formatDiv' class='ca-switch-button-button' style='width:12px; height:11px; left:11px;'></div></div>
<?tr("File Format");?>: <font color='purple'><span id='format'></span></font></div></div>
<input type='button' id='cancelbutton' value='<?tr("Cancel");?>' onclick='cancelEdit();' disabled><input class='edits editButton' type='button' value='<?tr("Apply");?>' onclick='saveEdits();'><input id='donebutton' type='button' value='<?tr("Done");?>' onclick='done();'>
<div><a id='credits' style='float:right'><?tr("Credits");?></a></div>
<span id='debugging'></span>